function [candidate_lines_merged, inds_strs_same_intrsctns] = ...
                mergeIfPossible(inds_strs_same_intrsctns,...
                                lines_strings,...
                                ind_unique,...
                                i,...
                                candidate_lines,...
                                candidate_lines_merged,...
                                cur_stroke,...
                                cam_param)
                            
    if isempty(inds_strs_same_intrsctns)
        return;
    end
    
    if count(lines_strings(ind_unique(i)), "_") == 1
        ind_similar_cand_lines = inds_strs_same_intrsctns(1);   
        inds_strs_same_intrsctns = inds_strs_same_intrsctns(2:end);
    else
        [ind_similar_cand_lines, inds_strs_same_intrsctns, candidate_lines] = ...
            findIndicesCandidateLinesSameIntersectionsAndDirections(...
                candidate_lines,...
                inds_strs_same_intrsctns,...
                inds_strs_same_intrsctns(1),...
                inds_strs_same_intrsctns(2:end));
    end

     
     %Create multiple configurations:
     num_lines = length(candidate_lines_merged);
     if num_lines == 0
        candidate_lines_merged = ...
            mergeIntoSingleLineWithMultipleConfirations(candidate_lines,...
                                                     ind_similar_cand_lines,...
                                                     cur_stroke,...
                                                     cam_param);   
     else
         num_lines = num_lines + 1;
         candidate_lines_merged(num_lines) = ...
            mergeIntoSingleLineWithMultipleConfirations(candidate_lines,...
                                                     ind_similar_cand_lines,...
                                                     cur_stroke,...
                                                     cam_param);   
     end
     % Check the rest of lines                                            
     [candidate_lines_merged, inds_strs_same_intrsctns] = ...
                mergeIfPossible(inds_strs_same_intrsctns,...
                                lines_strings,...
                                ind_unique,...
                                i,...
                                candidate_lines,...
                                candidate_lines_merged,...
                                cur_stroke,...
                                cam_param);
                            
end

% 
% function [candidate_line_new] = mergeIntoSingleLineWithMultipleConfirations(candidate_lines,...
%                                         ind_similar_cand_lines,...
%                                         cur_stroke,...
%                                         cam_param)
% 
% % Intialize:                                    
% mean_dir = sum(cat(1,candidate_lines(ind_similar_cand_lines).dir),1);
% mean_dir = mean_dir./norm(mean_dir);
% 
% candidate_line_new = createOneCandidateLine(mean(cat(1,candidate_lines(ind_similar_cand_lines).origin),1),...
%                                             mean_dir,...
%                                             cur_stroke.primitive_geom,...
%                                             cam_param.P);                                  
% % Add all the configurations:
% 
% % vals = cat(1,candidate_lines(ind_similar_cand_lines).origin);
% % figure(14); plot3(vals(:,1), vals(:,2), vals(:,3));
% % hold on;
% 
% for j = 1:length(ind_similar_cand_lines)
%      iscl = ind_similar_cand_lines(j);
%      
% %      warning('candidate_lines(iscl).configurations(1).p_intrsctns_distances can be updated');
% %      
% %      plot3(candidate_lines(ind_similar_cand_lines(j)).coordinates3D_prior(1,[1,4]), ...
% %           candidate_lines(ind_similar_cand_lines(j)).coordinates3D_prior(1,[2,5]), ...
% %           candidate_lines(ind_similar_cand_lines(j)).coordinates3D_prior(1,[3,6]), '*-');
%       
%      
%      candidate_line_new = addIntersectionsConfigCandidateLine(...
%                                 candidate_line_new,...
%                                 candidate_lines(iscl).configurations(1).inds_intrsctns,...
%                                 candidate_lines(iscl).configurations(1).inds_intrsctns__assigned,...
%                                 candidate_lines(iscl).configurations(1).inds_intrsctns__mult_cnddts,...
%                                 candidate_lines(iscl).configurations(1).inds_intrsctns__mult_cnddts_ind, ...
%                                 candidate_lines(iscl).configurations(1).inds_jnts_strks,...                                        
%                                 candidate_lines(iscl).configurations(1).p_intrsctns_dists,...
%                                 NaN,...
%                                 NaN,...
%                                 NaN);                                            
% end
% 
% end