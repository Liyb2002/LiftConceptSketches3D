%% Iteratively merges candidate lines:

function [candidate_lines_new, inds_strs_same_intrsctns] = ...
                mergeCandidateLinesIfPossible(inds_strs_same_intrsctns,...
                                candidate_lines,...
                                candidate_lines_new,...
                                cur_stroke,...
                                cam_param)
                            
    if isempty(inds_strs_same_intrsctns)
        return;
    end
    
    [ind_similar_cand_lines, inds_strs_same_intrsctns, candidate_lines] = ...
                findIndicesCandidateLinesSameIntersectionsAndDirections(...
                    candidate_lines,...
                    inds_strs_same_intrsctns,...
                    inds_strs_same_intrsctns(1),...
                    inds_strs_same_intrsctns(2:end));


    %Weighted average similar lines:
    num_lines = length(candidate_lines_new);
    if num_lines == 0
       candidate_lines_new = nonWeightedAverage(candidate_lines,...
                                        ind_similar_cand_lines,...
                                        cur_stroke,...
                                        cam_param);
    else                                
        num_lines = num_lines+1;
        candidate_lines_new(num_lines) = nonWeightedAverage(candidate_lines,...
                                            ind_similar_cand_lines,...
                                            cur_stroke,...
                                            cam_param);
    end
    
    [candidate_lines_new, inds_strs_same_intrsctns] = ...
                mergeCandidateLinesIfPossible(inds_strs_same_intrsctns,...
                                candidate_lines,...
                                candidate_lines_new,...
                                cur_stroke,...
                                cam_param);
                            
end

function [candidate_line_new] = nonWeightedAverage(candidate_lines,...
                                        ind_similar_cand_lines,...
                                        cur_stroke,...
                                        cam_param)
    % Origin:
    mean_origin = mean(cat(1,candidate_lines(ind_similar_cand_lines).origin),1);
             
    % Direction:
    mean_dir = sum(cat(1,candidate_lines(ind_similar_cand_lines).dir),1);
    mean_dir = mean_dir./norm(mean_dir);

    % Intersections:
    inds_intrsctns = unique( ...
            cell2mat( ...
                arrayfun(@(x) x.configurations(1).inds_intrsctns, ...
                                candidate_lines(ind_similar_cand_lines), ...
                                'UniformOutput',false)), ...
            'stable');

    % Intersections assigned:
    intersections__assigned = unique( ...
                            cell2mat( ...
                                arrayfun(@(x) x.configurations(1).inds_intrsctns__assigned, ...
                                candidate_lines(ind_similar_cand_lines), ...
                                'UniformOutput', false)), ...
                            'stable');  

    % Intersections multiple candidates:
    [intersections__mult_cnddts, ia, ~] = ...
        unique( ...
            cell2mat(arrayfun(@(x) ...
                              x.configurations(1).inds_intrsctns__mult_cnddts, ...
                              candidate_lines(ind_similar_cand_lines), ...
                              'UniformOutput', ...
                              false)), ...
                     'stable');
    
    % Version of each of the intersection with multiple candidates:             
    inds_intrsctns__mult_cnddts_ind = ...
            cell2mat(...
                    arrayfun(...
                        @(x) ...
                        x.configurations(1).inds_intrsctns__mult_cnddts_ind, ...
                        candidate_lines(ind_similar_cand_lines), ...
                        'UniformOutput', ...
                        false));

    inds_intrsctns__mult_cnddts_ind = inds_intrsctns__mult_cnddts_ind(ia);
     
    
    % Probablities of intersections based on distances:             
     p_intrsctns_distances = candidate_lines(ind_similar_cand_lines(1)).configurations(1).p_intrsctns_dists;
     for i = 2:length(ind_similar_cand_lines)                                    
        p_intrsctns_distances = p_intrsctns_distances + candidate_lines(ind_similar_cand_lines(i)).configurations(1).p_intrsctns_dists;
     end
     p_intrsctns_distances = p_intrsctns_distances/length(ind_similar_cand_lines) ;



         
    % New candaite line:
     candidate_line_new = ...
                createOneCandidateLine( mean_origin,...
                                        mean_dir,...
                                        cur_stroke.primitive_geom,...
                                        cam_param.P,...
                                        inds_intrsctns,...
                                        intersections__assigned,...
                                        intersections__mult_cnddts,...
                                        inds_intrsctns__mult_cnddts_ind,...
                                        candidate_lines(ind_similar_cand_lines(1)).configurations(1).inds_jnts_strks,...
                                        p_intrsctns_distances,...
                                        NaN,...
                                        NaN,...
                                        NaN);                     
end