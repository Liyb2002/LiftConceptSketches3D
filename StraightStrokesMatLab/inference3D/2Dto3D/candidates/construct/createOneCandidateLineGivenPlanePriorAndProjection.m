% Description:
%   Intialises the structure of the candidate line, given an origin,
%   direction, 2D line primitive coordinates and camera rojection matrix.

function candidate_line = ...
                createOneCandidateLineGivenPlanePriorAndProjection( p3D_in,...
                                        orth_vec,...
                                        primitive_geom,...
                                        cam_param,...
                                        inds_intrsctns,...
                                        inds_intrsctns__assigned,...
                                        inds_intrsctns__mult_cnddts,...
                                        inds_intrsctns__mult_cnddts_ind,...
                                        inds_jnts_strks,...
                                        p_intrsctns_dists,...
                                        p_directional,...
                                        p_coverage,...
                                        p_full)                                       
                                    
    candidate_line.origin  = p3D_in;
   
    
    candidate_line.coordinates3D_prior(1:3) = ...
        getSecondPointGivenOrthVec(cam_param.K,...
                                   cam_param.R,...
                                   cam_param.t, ...
                                   primitive_geom(1), ...
                                   primitive_geom(3), ...
                                   p3D_in,...
                                   orth_vec);
%     
%     [vals]= cam_param.P* [candidate_line.coordinates3D_prior(1:3)'; 1];
%     vals = vals(1:2)./vals(3)
%     
    candidate_line.coordinates3D_prior(4:6) = ...
        getSecondPointGivenOrthVec(cam_param.K,...
                                   cam_param.R,...
                                   cam_param.t, ...
                                   primitive_geom(2), ...
                                   primitive_geom(4), ...
                                   p3D_in,...
                                   orth_vec);
    
%     plot3(candidate_line.coordinates3D_prior([1,4]),...
%         candidate_line.coordinates3D_prior([2,5]), ...
%         candidate_line.coordinates3D_prior([3,6]), '*-r');                               
                               
    candidate_line.length3D = sqrt(sum( (candidate_line.coordinates3D_prior(1, 4:6) -  ...
                                         candidate_line.coordinates3D_prior(1, 1:3)).^2));
                                     
    candidate_line.dir = (candidate_line.coordinates3D_prior(1, 4:6) - ...
                          candidate_line.coordinates3D_prior(1, 1:3))/candidate_line.length3D;        

    candidate_line.configurations = [];

    if ~exist('p_intrsctns_dists', 'var')
        p_intrsctns_dists = 1.0;
    end
    if ~exist('p_directional ', 'var')
        p_directional = 1.0;
    end
    if ~exist('p_coverage ', 'var')
        p_coverage = 0.0;
    end
    if ~exist('p_full ', 'var')
        p_full = 1.0;
    end


    candidate_line = addIntersectionsConfigCandidateLine(...
                            candidate_line,...
                            inds_intrsctns,...
                            inds_intrsctns__assigned,...
                            inds_intrsctns__mult_cnddts,...
                            inds_intrsctns__mult_cnddts_ind,...
                            inds_jnts_strks,...                                
                            p_intrsctns_dists,...
                            p_directional,...
                            p_coverage,...
                            p_full);
                    
    candidate_line.list_jnt_strks = [];
end