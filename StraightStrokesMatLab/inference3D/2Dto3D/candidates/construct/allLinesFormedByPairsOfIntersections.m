%  Input:
%       pairsInterInter --  do not create a lines for intersections that
%                           group perceptually in 3d.

        
function candidate_lines =...
                allLinesFormedByPairsOfIntersections(cur_stroke,...
                                                    strokes_topology,...
                                                    candidate_lines,...
                                                    intersections,...
                                                    cam_param,...
                                                    pairsInterInter) 
        %% Load globals:      
        
        global ESTIMATE_JOINTLY; 
                
        %% Lines through intersectiosn with unique assignement:
        
        inds_intrsctns_eval = cur_stroke.inds_intrsctns_eval;  % That are the intersections with previous strokes and assigned future strokes
        
        if length(inds_intrsctns_eval) >= 2
            %% Find all feasible pairs of intersections based on distances between the intersections:
            
            pairs = selectFeasiblePairsOfIntersections(...
                        intersections,....
                        inds_intrsctns_eval,...
                        pairsInterInter,...
                        cur_stroke.ind,...
                        strokes_topology);

            if isempty(pairs)
                return;
            end
                        
            %% Assigned intersections
            ind_assigned_intercs = find(ismember(pairs(:,1), cur_stroke.inds_intrsctns_eval_actv) & ...
                                        ismember(pairs(:,2), cur_stroke.inds_intrsctns_eval_actv));
                                    
            num_line_type1 = length(candidate_lines);
            
            num_line_type2 = size(pairs(ind_assigned_intercs,:), 1);
            
            num_candidate_lines = num_line_type1 + num_line_type2;
            

            if  num_line_type2                   
               if isempty(candidate_lines)
                    clear('candidate_lines');
               end
               
               indcs_intrsctns = pairs(ind_assigned_intercs,:);
               indcs_intrsctns__assigned = indcs_intrsctns;
               
               indcs_intrsctns__mult_cnddts = [];
               indcs_intrsctns__mult_cnddts_ind = [];
               inds_jnts_strks = {};
        
               candidate_lines(num_line_type1+1:num_candidate_lines) = ...
                   initialiseCandidateLines(num_candidate_lines-num_line_type1, ...
                                            cat(1,intersections(pairs(ind_assigned_intercs,1)).coordinates3D),...
                                            cat(1,intersections(pairs(ind_assigned_intercs,2)).coordinates3D),...
                                            indcs_intrsctns,...
                                            indcs_intrsctns__assigned, ...
                                            indcs_intrsctns__mult_cnddts, ...
                                            indcs_intrsctns__mult_cnddts_ind, ...
                                            inds_jnts_strks, ...
                                            cur_stroke,...
                                            cam_param);
            end 
            
            
            %% Intersections multiplte hypothesis
            if ESTIMATE_JOINTLY
%                 inds_strks_mltpl_cnddts =  cur_stroke.inds_intrsctns_eval_actv;

                % First is intersection with multiple candiates, second is with assigned stroke:
                ind_mult_hypoth_1 = ...
                    find(ismember(pairs(:,1), cur_stroke.inds_intrsctns_eval_mltpl_cnddts) & ...
                         ismember(pairs(:,2), cur_stroke.inds_intrsctns_eval_actv));
                                     
                % Second is intersection with multiple candiates, first is with assigned stroke:
                ind_mult_hypoth_2 = ...
                    find(ismember(pairs(:,1), cur_stroke.inds_intrsctns_eval_actv) & ...
                         ismember(pairs(:,2), cur_stroke.inds_intrsctns_eval_mltpl_cnddts));

                % Both are the intersections with strokes with multiple candidates:
                ind_mult_hypoth_3 = ...
                    find(ismember(pairs(:,1), cur_stroke.inds_intrsctns_eval_mltpl_cnddts) & ...
                         ismember(pairs(:,2), cur_stroke.inds_intrsctns_eval_mltpl_cnddts));

               
                
                for imh = 1:length(ind_mult_hypoth_1)
                    ind_intrsctn_mltpl_cnddts = pairs(ind_mult_hypoth_1(imh),1);
                    ind_strk_mltpl_cnddts = ...
                        setdiff(intersections(ind_intrsctn_mltpl_cnddts).strokes_indices,...
                                cur_stroke.ind);
                    
                    % For each intersection create multiple candidate lines
                    % according to hypoth                                           
                    [candidate_lines]  = ...
                            allLinesFormedByCurrentPair(strokes_topology,...
                                                        candidate_lines, ...
                                                        intersections, ...
                                                        ind_strk_mltpl_cnddts, ...
                                                        ind_intrsctn_mltpl_cnddts, ...
                                                        pairs(ind_mult_hypoth_1(imh),2),...
                                                        cur_stroke,...
                                                        cam_param);
                end

                 for imh = 1:length(ind_mult_hypoth_2)
                    ind_intrsctn_mltpl_cnddts = pairs(ind_mult_hypoth_2(imh),2);
                    ind_strk_mltpl_cnddts = setdiff(intersections(ind_intrsctn_mltpl_cnddts).strokes_indices, cur_stroke.ind);
                    % For each intersection create multiple candidate lines
                    % according to hypoth
                    [candidate_lines]  = ...
                            allLinesFormedByCurrentPair(strokes_topology,...
                                                        candidate_lines,...
                                                        intersections,...
                                                        ind_strk_mltpl_cnddts,...
                                                        ind_intrsctn_mltpl_cnddts,...
                                                        pairs(ind_mult_hypoth_2(imh),1),...
                                                        cur_stroke, ...
                                                        cam_param);
                 end
                 
                  for imh = 1:length(ind_mult_hypoth_3)
                        ind_intrsctn_mltpl_cnddts1 = pairs(ind_mult_hypoth_3(imh),1);
                        ind_intrsctn_mltpl_cnddts2 = pairs(ind_mult_hypoth_3(imh),2);
                        
                        ind_strk_mltpl_cnddts1 = setdiff(intersections(ind_intrsctn_mltpl_cnddts1).strokes_indices, cur_stroke.ind);
                        ind_strk_mltpl_cnddts2 = setdiff(intersections(ind_intrsctn_mltpl_cnddts2).strokes_indices, cur_stroke.ind);
                    
                        [candidate_lines] = ...
                                allLinesFormedByPairsHypothIntersections(strokes_topology, candidate_lines, intersections, ...
                                                    ind_strk_mltpl_cnddts1, ...
                                                    ind_strk_mltpl_cnddts2, ...
                                                    ind_intrsctn_mltpl_cnddts1, ...
                                                    ind_intrsctn_mltpl_cnddts2,...
                                                    [],...
                                                    cam_param,...
                                                    cur_stroke);
                  end
                 
            end
        end
        
        if ~exist('candidate_lines', 'var')
            candidate_lines = [];
        end
end






function [candidate_lines] = ...
                    allLinesFormedByPairsHypothIntersections(strokes_topology, candidate_lines, intersections, ...
                                                ind_strk_mltpl_cnddts1, ...
                                                ind_strk_mltpl_cnddts2, ...
                                                ind_intrsctn_mltpl_cnddts1, ...
                                                ind_intrsctn_mltpl_cnddts2,...
                                                inds_strks_mltpl_cnddts,...
                                                cam_param,...
                                                cur_stroke)
    
    if ~isfield(strokes_topology(ind_strk_mltpl_cnddts1), 'candidate_lines') || ...
       ~isfield(strokes_topology(ind_strk_mltpl_cnddts2), 'candidate_lines')      
        return;
    end
    
    num_candidate_lines = length(candidate_lines);
      
%     i1 = inds_strks_mltpl_cnddts == ind_strk_mltpl_cnddts1;    
%     i2 = inds_strks_mltpl_cnddts == ind_strk_mltpl_cnddts2;    
    
    num_candidate_lines__ind_strk_mltpl_cnddts1 = length(strokes_topology(ind_strk_mltpl_cnddts1).candidate_lines);
    num_candidate_lines__ind_strk_mltpl_cnddts2 = length(strokes_topology(ind_strk_mltpl_cnddts2).candidate_lines);
    
    for hj1 = 1:num_candidate_lines__ind_strk_mltpl_cnddts1
        
        for hj2 = 1:num_candidate_lines__ind_strk_mltpl_cnddts2
            
            %CopY the hypothesis TO ACCOUNT FORNEW COST DUE TO
            %intersection.
             
            [inter_coord_3D1, ~] = ...
                opt3Dpos2DProj( cat(1,intersections(ind_intrsctn_mltpl_cnddts1).coordinates2D), cam_param, ...
                            strokes_topology(ind_strk_mltpl_cnddts1).candidate_lines(hj1).coordinates3D_prior(1, 1:3), ...
                            strokes_topology(ind_strk_mltpl_cnddts1).candidate_lines(hj1).coordinates3D_prior(1, 4:6));
                        
            [inter_coord_3D2, ~] = ...
                opt3Dpos2DProj( cat(1,intersections(ind_intrsctn_mltpl_cnddts2).coordinates2D), cam_param, ...
                            strokes_topology(ind_strk_mltpl_cnddts2).candidate_lines(hj2).coordinates3D_prior(1, 1:3), ...
                            strokes_topology(ind_strk_mltpl_cnddts2).candidate_lines(hj2).coordinates3D_prior(1, 4:6));
            
%             [inter_coord_3D1, ~] = ...
%                     getIntersectionCoordinateGivenCandaiteLine(strokes_topology, ...
%                                                                intersections, ...
%                                                                cam_param,...
%                                                                ind_intrsctn_mltpl_cnddts1,...
%                                                                ind_strk_mltpl_cnddts1,...
%                                                                hj1);
%             [inter_coord_3D2, ~] = ...
%                     getIntersectionCoordinateGivenCandaiteLine(strokes_topology, ...
%                                                                intersections, ...
%                                                                cam_param,...
%                                                                ind_intrsctn_mltpl_cnddts2,...
%                                                                ind_strk_mltpl_cnddts2,...
%                                                                hj2);
            %form a candidate line

           num_candidate_lines = num_candidate_lines + 1;
           
           inds_intrsctns = [ind_intrsctn_mltpl_cnddts1 ind_intrsctn_mltpl_cnddts2];
           inds_intrsctns__assigned = []; 
           inds_intrsctns__mult_cnddts = [ind_intrsctn_mltpl_cnddts1 ind_intrsctn_mltpl_cnddts2];
           inds_intrsctns__mult_cnddts_ind = [hj1 hj2];
           inds_jnts_strks{1} = [ind_strk_mltpl_cnddts1 ind_strk_mltpl_cnddts2];
       
%            fig_num_3D = 9;        
%            plotStrokesTopolgyIntersectionsTypes(...
%                             strokes_topology( cat(1, strokes_topology(:).depth_assigned)),...
%                             cur_stroke,...
%                             intersections,...
%                             fig_num_3D);
       
                        
           candidate_line = initialiseCandidateLines(1,...
                                                            inter_coord_3D1,...
                                                            inter_coord_3D2,...
                                                            inds_intrsctns,...
                                                            inds_intrsctns__assigned,...
                                                            inds_intrsctns__mult_cnddts,...
                                                            inds_intrsctns__mult_cnddts_ind,...
                                                            inds_jnts_strks,...
                                                            cur_stroke,...
                                                            cam_param);
            if num_candidate_lines == 1
                candidate_lines = candidate_line;
            else
                candidate_lines(num_candidate_lines) = candidate_line;                                                     
            end                 
        end
    end
            
end
