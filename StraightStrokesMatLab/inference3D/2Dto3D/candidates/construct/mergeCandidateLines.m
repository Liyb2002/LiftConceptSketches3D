function [candidate_lines_new] = ...
                mergeCandidateLines(candidate_lines,...
                                        intersections,...
                                        cur_stroke,...
                                        cam_param,...
                                        strokes_topology)
    
   
    %% Find lines with the same lists of intersections:        
    
    num_candidate_lines = length(candidate_lines);                 
    lines_strings =  strings(num_candidate_lines,1);

    for l_ind = 1:num_candidate_lines
        lines_strings(l_ind) = ...
          sprintf('%d_', candidate_lines(l_ind).configurations(1).inds_intrsctns__assigned);
      
        for j =1:length(candidate_lines(l_ind).configurations(1).inds_intrsctns__mult_cnddts)
            lines_strings(l_ind) =  ...
                sprintf('%s %d_%d_',lines_strings(l_ind), ...
                        candidate_lines(l_ind).configurations(1).inds_intrsctns__mult_cnddts(j),...
                        candidate_lines(l_ind).configurations(1).inds_intrsctns__mult_cnddts_ind(j));
        end
    end
  
    [~, ind_unique, ~] = unique(lines_strings, ...
                                'rows', 'stable');
                            
    num_lines = 0;
    
    candidate_lines_new = [];
    
    for i = 1:length(ind_unique)
        % All the strings with the same intersections numbers:
        inds_strs_same_intrsctns = ...
            find(lines_strings == lines_strings(ind_unique(i)));
        
    
        [candidate_lines_new] = ...
                mergeCandidateLinesIfPossible(inds_strs_same_intrsctns,...
                                candidate_lines,...
                                candidate_lines_new,...
                                cur_stroke,...
                                cam_param);
    end
%     
    global DISPLAY_INFO
%     
%     if DISPLAY_INFO
%         fprintf('Before %d\n', num_candidate_lines);
%         fprintf('After  %d\n', length(candidate_lines_new));
%     end
    
%     fig_num = 10;
%     plotCandidateLines(candidate_lines_new, ...
%                    strokes_topology, ...
%                    cur_stroke, ...
%                    intersections, ...
%                    fig_num);
    
%     global SHOW_FIGS;
%         if SHOW_FIGS
%         fig_num = 11;
%         plotCandidateLines(candidate_lines, ...
%                            strokes_topology, ...
%                            cur_stroke, ...
%                            intersections, ...
%                            fig_num);
% 
%         set(fig_num, 'Position', [2562         178         958        1074]);
%     end



    candidate_lines_new = mergeCandidateLinesIntoConfigurations(candidate_lines_new, ...
                                          cur_stroke,...
                                          cam_param);
%     if DISPLAY_INFO
%         fprintf('After  %d\n', length(candidate_lines_new));
%     end
%     
%     fig_num = 21;
%     plotCandidateLines(candidate_lines_new, ...
%                    strokes_topology, ...
%                    cur_stroke, ...
%                    intersections, ...
%                    fig_num);
%     candidate_lines_new = candidate_lines;
    candidate_lines_new = mergeCandidateLinesIntoConfigurationsGeometrically(candidate_lines_new, ...
                                          cur_stroke,...
                                          cam_param,...
                                          strokes_topology,...
                                          intersections);
                                      
    if DISPLAY_INFO
        fprintf('After geometrical  %d\n', length(candidate_lines_new));
    end
    
%     fig_num = 12;
%     plotCandidateLines(candidate_lines_new, ...
%                    strokes_topology, ...
%                    cur_stroke, ...
%                    intersections, ...
%                    fig_num);
    
end

function candidate_lines_merged = ...
    mergeCandidateLinesIntoConfigurations(candidate_lines, ...
                                          cur_stroke,...
                                          cam_param)
% Also merge the lines into configurations.

num_candidate_lines = length(candidate_lines);
lines_strings =  strings(num_candidate_lines,1);

% Record only common assigned nodes:
for l_ind = 1:num_candidate_lines
   lines_strings(l_ind) = ...
        sprintf('%d_', candidate_lines(l_ind).configurations(1).inds_intrsctns__assigned);
end


[~, ind_unique, ~] = unique(lines_strings, 'rows', 'stable');

candidate_lines_merged =[];

for i = 1:length(ind_unique)    
    
    inds_strs_same_intrsctns = ...
        find(lines_strings == lines_strings(ind_unique(i)));

    
    [candidate_lines_merged] = ...
                mergeIfPossible(inds_strs_same_intrsctns,...
                                lines_strings,...
                                ind_unique,...
                                i,...
                                candidate_lines,...
                                candidate_lines_merged,...
                                cur_stroke,...
                                cam_param);
end



end







