function [strokes_topology, intersections] = ...
                addIntersectionsIntoJointStrokes( cur_stroke,...
                                                  candidate_lines,...
                                                  strokes_topology,...
                                                  intersections,...
                                                  cam_param,...
                                                  pairsInterInter)


global ESTIMATE_JOINTLY; 
if ESTIMATE_JOINTLY       
    all_configs = cat(2, candidate_lines(:).configurations);
    IM = [];
    
    j = 1;
    for i = 1:length(all_configs)        
        for ii = 1:length(all_configs(i).inds_intrsctns__mult_cnddts)
        IM(j, 1) = all_configs(i).inds_intrsctns__mult_cnddts(ii);
        IM(j, 2) = all_configs(i).inds_intrsctns__mult_cnddts_ind(ii);
        IM(j, 3) = all_configs(i).inds_jnts_strks(ii);       
        j = j+1;
        end
    end
    
    IM = unique(IM, 'rows');
    
    inds_intrsctns__mult_candidates = ...
        cur_stroke.inds_intrsctns_eval_mltpl_cnddts; 
    inds_strokes__mult_candidates =  ...
        cur_stroke.inds_intrsctng_strks_eval_mltpl_cnddts; 
% 
%     if ~isempty(inds_intrsctns__mult_candidates)
%         
%     
%         % todo: 1 - here to the relevan 3D intersection only for the
%         % intersecting stokes.
%         % 2 - in the process of creating the stroke keep the 3D intersection version
%         % 3 -- add the 3D intersection version into the candiate line when created, so that we know where to write to the         
        try
        [strokes_topology, intersections, num_strokes_dependend] = ...
                    addIntersectionToJointStrokes(  ...
                                                    strokes_topology,...
                                                    inds_intrsctns__mult_candidates,...
                                                    inds_strokes__mult_candidates,...
                                                    intersections,...
                                                    cam_param,...
                                                    pairsInterInter,...
                                                    cur_stroke.ind,...
                                                    true,...
                                                    IM,...
                                                    candidate_lines);
        catch e
            rethrow(e);
        end
%     end
end

end