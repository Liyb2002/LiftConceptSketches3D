function [strokes_topology, intersections, num_strokes_dependend] = ...
                addIntersectionToJointStrokes(...
                    strokes_topology,...
                	inds_intrsctns__mult_candidates,...
                    inds_strokes__mult_candidates,...
                    intersections,...
                    cam_param,...
                    pairsInterInter,...
                    cur_stroke_ind,...
                    add_config,...
                    IM,...
                    candidate_lines) %the newly created candiatale lines for the current stroke -- neede to compute direction
                
   num_strokes_dependend = 0;
   
   % For all the intersections with multiple hypothetical positions:   
   for i = 1:length(inds_intrsctns__mult_candidates)
        disp(inds_intrsctns__mult_candidates);
        
        ind_hypoth_inter    = inds_intrsctns__mult_candidates(i);
        ind_hypoth_stroke   = inds_strokes__mult_candidates(i);

        if ~isfield(strokes_topology(ind_hypoth_stroke), 'candidate_lines')
            continue;
        end
        
        % Get the number of candidate lines of the intersecting stroke:
        num_cnddt_lns__strk_mltpl_cnndts = length(strokes_topology(ind_hypoth_stroke).candidate_lines);
%         
%         if num_cnddt_lns__strk_mltpl_cnndts == 0
%            warning('try to create the configuration') 
%         end
%         
        if num_cnddt_lns__strk_mltpl_cnndts 
            num_strokes_dependend = num_strokes_dependend + 1;
        end
        
        % Add new intersection into each of the candaite lines:
        for ind_cnddt_ln = 1:num_cnddt_lns__strk_mltpl_cnndts                 
           if ~isempty(IM)
               check_intersection_exists = ismember(ind_hypoth_inter, IM(:,1)) & ...
                                           ismember(ind_cnddt_ln, IM(:,2));
           else
               check_intersection_exists = false;
           end
           
           % Create 3D intersections version
           % Add the candidate position of the intersection into the
           % intersections structure:
           [~, intersections] =  getIntersectionCoordinateGivenCandidateLine(strokes_topology, ...
                                                       intersections, ...
                                                       cam_param,...
                                                       ind_hypoth_inter,...
                                                       ind_hypoth_stroke,...
                                                       ind_cnddt_ln);
                                                   
           
           
           if add_config && check_intersection_exists
               % Add candidate configurations joint stroke;
               % Add candidate configurations to the relevant candidate
               % intersection:
               mhs = (intersections(ind_hypoth_inter).strokes_indices == ind_hypoth_stroke);
               intersections(ind_hypoth_inter).cnddts3D(ind_cnddt_ln).cnddt_lns{mhs} = ind_cnddt_ln;
               
               %intersections(ind_hypoth_inter).plane_normal = cross() 
               
               tail_stroke = strokes_topology(ind_hypoth_stroke);
               tail_stroke.ind = ind_hypoth_stroke;
               try
                   [strokes_topology(ind_hypoth_stroke).candidate_lines(ind_cnddt_ln), intersections] = ...
                       addConfigurationsGivenIntersection(...
                                                strokes_topology(ind_hypoth_stroke).candidate_lines(ind_cnddt_ln),...
                                                strokes_topology(ind_hypoth_stroke).primitive_geom,... %2D
                                                strokes_topology(ind_hypoth_stroke).length2D,...
                                                strokes_topology(ind_hypoth_stroke).line_group,...
                                                intersections,...
                                                strokes_topology,...
                                                ind_hypoth_inter,...
                                                ind_hypoth_stroke,...
                                                cur_stroke_ind,...%ind_hypoth_stroke,...
                                                ind_cnddt_ln,...
                                                candidate_lines);                                
               catch e
                  rethrow(e); 
               end
           end
        end
   end
end